package net.kanstren.finnishnlp.opennlp.pos;

import net.kanstren.finnishnlp.opennlp.voikko.NotFoundWords;
import net.kanstren.finnishnlp.opennlp.voikko.VoikkoConverter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Stream;

/**
 * Read an OpenNLP training dataset (sentences) generated by the Python script, and convert every word in all sentences to baseform.
 * Rewrite as a new training file.
 * Useful for testing how it might work, even if POS tagging might otherwise make more sense without baseforming.
 *
 * @author Teemu Kanstren
 */
public class OpenNLPVoikkoConverter {
	private static final Logger log = LogManager.getLogger();
	/** Track how many words have been loaded. */
	private static int loadedWords = 0;
	/** Track how many sentences have been loaded. */
	private static int loadedSentences = 0;
	/** Track how many words have been successfully baseformed. */
	private static int baseformed = 0;
	/** Track words that are not recognized by Voikko. */
	private static NotFoundWords nfw = new NotFoundWords();
	/** Convert to baseform using Voikko (and custom spell list). */
	private static VoikkoConverter vc = new VoikkoConverter(nfw);
	/** Writing words to disk. */
	private static BufferedWriter bw;

	public static void main(String[] args) throws Exception {
		String sentenceFilename = args[0];
		String outFilename = args[1];
		log.info("Starting to voikko sentences from " + sentenceFilename + ". Output file is "+outFilename);

		File fout = new File(outFilename);
		FileOutputStream fos = new FileOutputStream(fout);

		bw = new BufferedWriter(new OutputStreamWriter(fos));

		try (Stream<String> stream = Files.lines(Paths.get(sentenceFilename))) {
			stream.forEach(OpenNLPVoikkoConverter::process);
		}
		bw.flush();
		bw.close();
		fos.close();
	}

	private static void process(String line) {
		String[] split = line.split(" ");
		if (split.length < 2) {
			//this is likely an empty line..
			return;
		}
		loadedSentences++;

		if (loadedSentences % 50000 == 0) {
			log.debug("processed sentences:" + loadedSentences + " baseformed " + baseformed + ", loaded words " + loadedWords);
		}

		String newSentence = "";
		for (String s : split) {
			//split to word and POS tag, baseform word and rebuild as baseform-word_tag
			String[] wordAndTag = s.split("_");
			String word = wordAndTag[0];
			List<String> bases = vc.basesFor(word);
			if (bases.size() > 0) {
				//uses first base form to get reproducible results. assume first is always the same, as in sorted..
				word = bases.get(0);
				baseformed++;
			}
			String tag = wordAndTag[1];
			newSentence += word+"_"+tag+" ";

			loadedWords++;
		}
		try {
			bw.write(newSentence.trim()+"\n");
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1);
		}

	}
}
